{
    "contents" : "#unzip the \"activity.zip\" file and read the contents into a variable \"actdat\" with read.csv\nactdat <- read.csv(unz(\"activity.zip\", \"activity.csv\"))\n\n#loaded dplyr library\nlibrary(dplyr)\nlibrary(ggplot2)\n\n#NEW QUESTION: What is mean total number of steps taken per day?\n\n#calculate the total number of steps per day\ntotstepsd <- actdat %>% na.omit() %>% group_by(date) %>% summarise(total = sum(steps))\n\n#Make a histogram of the total number of steps taken each day\nggplot(totstepsd, aes(x = total)) + geom_histogram(binwidth = 600, aes(fill = ..count..)) + scale_x_continuous(breaks = seq(0,25000, by = 2500))\n\n#Output the histogram to a png file called \"hist1.png\"\nggsave(filename = \"hist1.png\")\n\n#Calculate the mean and median number of steps taken per day\nmeansteps_day <- mean(totstepsd$total)\nmedsteps_day <- median(totstepsd$total)\n\n#the median number of steps is 10765 and the mean is 10766.19\n\n#NEW QUESION: What is the average daily activity pattern?\n\n#Make a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)\n#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?\n\navg5int <- actdat %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))\n\n#Plot the line graph\nggplot(data = avg5int, mapping = aes(x = interval, y = avg)) + geom_line() + scale_x_continuous(breaks = seq(0, 2400, by = 100)) + xlab(\"5 minute intervals\") + ylab(\"Average steps per day\") + ggtitle(\"Average Steps Per Day Per 5 Minute Interval\")\n\n#Save the graph as \"time1.png\"\nggsave(filename = \"time1.png\")\n\n#Determine which 5 minute interval contains the maximum number of steps\nmaxsteps <- avg5int %>% filter(avg == max(avg))\n\n#The interval with the maximun number of steps on average across all days is: 835\n\n#NEW QUESTION:  Imputing missing values\n\n#Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.\n\n#Calculate the total number of NA fields\ncountna <- actdat %>% group_by(steps) %>% summarise(num = n()) %>% filter(is.na(steps))\n\n#The number of NA fields is 2304\n\n#Impute the NA fields with the mean of steps for each grouped interval\nimpactdat <- actdat %>% group_by(interval) %>% mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps))\n\n#calculate the total number of steps per day\ntotstepsd_imp <- impactdat %>% na.omit() %>% group_by(date) %>% summarise(total = sum(steps))\n\nimpplot2 <- ggplot(totstepsd_na, aes(x = total)) + geom_histogram(binwidth = 600, aes(fill = ..count..)) + scale_x_continuous(breaks = seq(0,25000, by = 2500)) + ylim(0,15) + ggtitle(\"Total number of steps per day without data imputation\")\n\nimpplot1 <- ggplot(totstepsd_imp, aes(x = total)) + geom_histogram(binwidth = 600, aes(fill = ..count..)) + scale_x_continuous(breaks = seq(0,25000, by = 2500)) + ylim(0,15) + ggtitle(\"Total number of steps per day with data imputation\")\n#load library Rmisc for multiplot capability\n\n\n#save the 2 histograms to the \"hist2.png\"\npng(filename = \"hist2.png\")\nmultiplot(impplot1,impplot2)\ndev.off()\n\n#Calculate and report the mean and median total number of steps taken per day\n\nmeansteps_day_imp <- mean(totstepsd_imp$total)\nmedsteps_day_imp <- median(totstepsd_imp$total)\n\n#Mean steps were 10766.19 and median steps were 10765\n\n#NEW QUESTION:  Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.\n\nactdat1$weekday <- weekdays(as.Date(actdat$date))\n\n#load library \"timeDate\"\nlibrary(timeDate)\n\n#determine if a date is weekday or weekend and save it to a wkday column\n\nactdat1$wkday <- isWeekday(actdat1$date)\n\n#rename True to \"weekday\" and False to \"weekend\"\n\nactdat1 <- actdat1 %>% mutate(wkdayend = replace(wkday, wkday == FALSE, \"weekend\"))\nactdat1 <- actdat1 %>% mutate(wkdayend = replace(wkdayend, wkdayend == TRUE, \"weekday\"))\n\n#Make a panel plot containing a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.\n#despite using dplyr for this entire exercise, it would not group this data.  After 45 minutes, switching to aggregate\n\nwkdayavg_steps <- avg5intwkday %>% ungroup() %>% na.omit() %>% filter(wkdayend == \"weekday\") %>% select(c(steps, interval, wkdayend)) %>% group_by(interval) %>% summarize(avg = mean(steps))\n> View(wkdayavg_steps)\n\nwkendavg_steps <- avg5intwkday %>% ungroup() %>% na.omit() %>% filter(wkdayend == \"weekend\") %>% select(c(steps, interval, wkdayend)) %>% group_by(interval) %>% summarize(avg = mean(steps))\n\n#Plot the average number of steps across the 5 minute intervals for weekend and weekday\n\nweekdayplot <- ggplot(wkdayavg_steps,aes(interval, avg)) + geom_line() + scale_x_continuous(breaks = seq(0, 2400, by = 100)) + xlab(\"5 minute intervals\") + ylab(\"Average steps per day\") + ggtitle(\"Average Steps Per Day Per 5 Minute Interval (Weekday)\")\n\nweekendplot <- ggplot(wkendavg_steps,aes(interval, avg)) + geom_line() + scale_x_continuous(breaks = seq(0, 2400, by = 100)) + xlab(\"5 minute intervals\") + ylab(\"Average steps per day\") + ggtitle(\"Average Steps Per Day Per 5 Minute Interval (Weekend)\")\n\n#print it to \"timeplot3.png\"\npng(filename = \"timeplot3.png\")\nmultiplot(weekdayplot,weekendplot)\ndev.off()\n\n",
    "created" : 1457664808229.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "805121305",
    "id" : "CB731874",
    "lastKnownWriteTime" : 1457834634,
    "path" : "C:/Users/mcmillin/datasciencecoursera/RepData_PeerAssessment1/code_tmp.R",
    "project_path" : "code_tmp.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}